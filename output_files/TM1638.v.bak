// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// Generated by Quartus II Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
// Created on Sun May 17 21:05:09 2020

// synthesis message_off 10175

`timescale 1ns/1ns

module TM1638 (
    reset,clock,input1,input2,input3,input4,input5,input6,input7,input8,
    output1,output2);

    input reset;
    input clock;
    input input1;
    input input2;
    input input3;
    input input4;
    input input5;
    input input6;
    input input7;
    input input8;
    tri0 reset;
    tri0 input1;
    tri0 input2;
    tri0 input3;
    tri0 input4;
    tri0 input5;
    tri0 input6;
    tri0 input7;
    tri0 input8;
    output output1;
    output output2;
    reg output1;
    reg reg_output1;
    reg output2;
    reg [8:0] fstate;
    reg [8:0] reg_fstate;
    parameter state1=0,state2=1,state3=2,state4=3,state5=4,state6=5,state7=6,state8=7,state9=8;

    initial
    begin
        reg_output1 <= 1'b0;
    end

    always @(posedge clock or posedge reset)
    begin
        if (reset) begin
            fstate <= state1;
        end
        else begin
            fstate <= reg_fstate;
        end
    end

    always @(fstate or input1 or input2 or input3 or input4 or input5 or input6 or input7 or input8 or reg_output1)
    begin
        reg_output1 <= 1'b0;
        output2 <= 1'b0;
        output1 <= 1'b0;
        case (fstate)
            state1: begin
                reg_fstate <= state2;

                output2 <= 1'b0;

                reg_output1 <= input1;
            end
            state2: begin
                reg_fstate <= state3;

                reg_output1 <= input2;
            end
            state3: begin
                reg_fstate <= state4;

                reg_output1 <= input3;
            end
            state4: begin
                reg_fstate <= state5;

                reg_output1 <= input4;
            end
            state5: begin
                reg_fstate <= state6;

                reg_output1 <= input5;
            end
            state6: begin
                reg_fstate <= state7;

                reg_output1 <= input6;
            end
            state7: begin
                reg_fstate <= state8;

                reg_output1 <= input7;
            end
            state8: begin
                reg_fstate <= state9;

                output2 <= 1'b1;

                reg_output1 <= input8;
            end
            state9: begin
                reg_fstate <= state9;

                reg_output1 <= 1'b0;
            end
            default: begin
                reg_output1 <= 1'bx;
                output2 <= 1'bx;
                $display ("Reach undefined state");
            end
        endcase
        output1 <= reg_output1;
    end
endmodule // TM1638
